generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Course {
  id              Int               @id @default(autoincrement())
  name            String            @db.VarChar(255)
  credits         Int
  userId          Int
  User            User              @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  SemesterCourses SemesterCourses[]
}

model Evaluation {
  id               Int             @id @default(autoincrement())
  number           Int
  weight           Decimal         @db.Decimal
  grade            Decimal?        @db.Decimal
  evaluationTypeId Int
  semesterCourseId Int
  EvaluationType   EvaluationType  @relation(fields: [evaluationTypeId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  SemesterCourses  SemesterCourses @relation(fields: [semesterCourseId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model EvaluationType {
  id         Int          @id @default(autoincrement())
  name       String       @db.VarChar(255)
  Evaluation Evaluation[]
}

model Semester {
  id              Int               @id @default(autoincrement())
  name            String            @db.VarChar(255)
  startDate       DateTime          @db.Date
  endingDate      DateTime          @db.Date
  userId          Int
  User            User              @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  SemesterCourses SemesterCourses[]
}

model SemesterCourses {
  id         Int          @unique @default(autoincrement())
  courseId   Int
  semesterId Int
  passed     Boolean      @default(false)
  Course     Course       @relation(fields: [courseId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  Semester   Semester     @relation(fields: [semesterId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  Evaluation Evaluation[]

  @@id([courseId, semesterId])
}

model User {
  id            Int        @id @default(autoincrement())
  name          String?    @db.VarChar(255)
  email         String?    @unique @db.VarChar(255)
  emailVerified DateTime?  @db.Timestamp(6)
  image         String?    @db.VarChar(255)
  accounts      Account[]
  Course        Course[]
  Semester      Semester[]
  sessions       Session[]
}

model Account {
  id               Int     @id @default(autoincrement())
  userId            Int
  type               String  @db.VarChar(255)
  provider          String  @db.VarChar(255)
  providerAccountId String  @db.VarChar(255)
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String? @db.VarChar(255)
  scope             String? @db.VarChar(255)
  id_token          String?
  session_state     String? @db.VarChar(255)
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([provider, providerAccountId])
}

model Session {
  id           Int      @id @default(autoincrement())
  userId       Int
  sessionToken String   @unique @db.VarChar(255)
  expires      DateTime @db.Timestamp(6)
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model VerificationToken {
  identifier String   @db.VarChar(255)
  token      String   @unique @db.VarChar(255)
  expires    DateTime @db.Timestamp(6)

  @@unique([identifier, token])
}
